USE master;
GO

IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'NutriDiet')
BEGIN
    CREATE DATABASE NutriDiet;
END;
GO

USE NutriDiet;
GO

-- B·ªè r√†ng bu·ªôc FOREIGN KEY tr∆∞·ªõc khi x√≥a b·∫£ng
DECLARE @sql NVARCHAR(MAX) = N'';
SELECT @sql += 'ALTER TABLE [' + TABLE_SCHEMA + '].[' + TABLE_NAME + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + '];' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE CONSTRAINT_TYPE = 'FOREIGN KEY';

EXEC sp_executesql @sql;

-- X√≥a t·∫•t c·∫£ b·∫£ng
SET @sql = '';
SELECT @sql += 'DROP TABLE IF EXISTS [' + TABLE_SCHEMA + '].[' + TABLE_NAME + '];' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE';

EXEC sp_executesql @sql;
GO

-- B·∫£ng Role
CREATE TABLE Role (
    RoleID INT PRIMARY KEY,
    RoleName NVARCHAR(50) UNIQUE NOT NULL
);

-- B·∫£ng User
CREATE TABLE [User] (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    FullName NVARCHAR(255) NOT NULL,
    Email NVARCHAR(255) UNIQUE NOT NULL,
    Password NVARCHAR(255) NOT NULL,
    Phone NVARCHAR(20),
    Age INT CHECK (Age > 0),
    Gender NVARCHAR(10) CHECK (Gender IN ('Male', 'Female', 'Other')),
    Location NVARCHAR(20),
    Avatar NVARCHAR(MAX) NULL,
    fcmToken NVARCHAR(255) NULL,
    Status NVARCHAR(50) CHECK (Status IN ('Active', 'Inactive')) DEFAULT 'Active',
	EnableReminder BIT NULL, -- b·∫≠t th√¥ng b√°o nh·∫Øc nh·ªü
    RoleID INT NOT NULL,
    RefreshToken NVARCHAR(MAX) NULL,
	RefreshTokenExpiryTime DATETIME NULL,
    FOREIGN KEY (RoleID) REFERENCES Role(RoleID)
);

-- B·∫£ng Package
CREATE TABLE Package (
    PackageID INT IDENTITY(1,1) PRIMARY KEY,
    PackageName NVARCHAR(100) UNIQUE NOT NULL,
    Price FLOAT CHECK (Price >= 0),
    Duration INT CHECK (Duration > 0),
    Description NVARCHAR(255),
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE()
);

CREATE TABLE UserPackage (
    UserPackageID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    PackageID INT NOT NULL,
    StartDate DATETIME DEFAULT GETDATE(),
    ExpiryDate DATETIME NOT NULL,
    Status NVARCHAR(50),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (PackageID) REFERENCES Package(PackageID) ON DELETE CASCADE
);

-- B·∫£ng HealthProfile
CREATE TABLE GeneralHealthProfile (
    ProfileID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    Height FLOAT CHECK (Height > 0),
    Weight FLOAT CHECK (Weight > 0),
    ActivityLevel NVARCHAR(50),
	AISuggestion NVARCHAR(255),
	Status NVARCHAR(50) CHECK (Status IN ('Active', 'Expired')), 
	IsActive BIT,
	ImageUrl NVARCHAR(MAX) NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng Allergy (danh m·ª•c c√°c lo·∫°i d·ªã ·ª©ng)
CREATE TABLE Allergy (
    AllergyID INT IDENTITY(1,1) PRIMARY KEY,
    AllergyName NVARCHAR(255) NOT NULL,
    Notes NVARCHAR(255) NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE()
);

-- B·∫£ng trung gian UserAllergy (quan h·ªá n-n gi·ªØa User v√† Allergy)
CREATE TABLE UserAllergy (
    UserID INT NOT NULL,
    AllergyID INT NOT NULL,
    PRIMARY KEY (UserID, AllergyID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (AllergyID) REFERENCES Allergy(AllergyID) ON DELETE CASCADE
);

-- B·∫£ng Food
CREATE TABLE Food (
    FoodID INT IDENTITY(1,1) PRIMARY KEY,
    FoodName NVARCHAR(100) UNIQUE NOT NULL,
    MealType NVARCHAR(100), -- VD: b·ªØa ch√≠nh, b·ªØa ph·ª•, ƒÉn v·∫∑t...
    ImageUrl NVARCHAR(MAX) NULL,
    FoodType NVARCHAR(100), -- v√≠ d·ª•: rau c·ªß, th·ªãt
    Description NVARCHAR(255) NULL,
    ServingSize NVARCHAR(50), -- v√≠ d·ª•: 100g, 1 th√¨a
    Calories FLOAT CHECK (Calories >= 0),
    Protein FLOAT CHECK (Protein >= 0),
    Carbs FLOAT CHECK (Carbs >= 0), -- tinh b·ªôt
    Fat FLOAT CHECK (Fat >= 0),
    Glucid FLOAT CHECK (Glucid >= 0),
    Fiber FLOAT CHECK (Fiber >= 0)
);

-- B·∫£ng CuisineType
CREATE TABLE CuisineType (
    CuisineID INT IDENTITY(1,1) PRIMARY KEY,
    CuisineName NVARCHAR(50) UNIQUE NOT NULL -- mi·ªÅn nam, mi·ªÅn trung, trung hoa...
);

CREATE TABLE Ingredient (
    IngredientID INT IDENTITY(1,1) PRIMARY KEY,
    IngredientName NVARCHAR(255) NOT NULL UNIQUE,
    Calories FLOAT CHECK (Calories >= 0),
    Protein FLOAT CHECK (Protein >= 0),
    Carbs FLOAT CHECK (Carbs >= 0),
    Fat FLOAT CHECK (Fat >= 0),
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE()
);

CREATE TABLE FoodIngredient (
    FoodID INT NOT NULL,
    IngredientID INT NOT NULL,
    PRIMARY KEY (FoodID, IngredientID),
    FOREIGN KEY (FoodID) REFERENCES Food(FoodID) ON DELETE CASCADE,
    FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID) ON DELETE CASCADE
);

-- B·∫£ng RecipeSuggestion
CREATE TABLE RecipeSuggestion (
    RecipeID INT IDENTITY(1,1) PRIMARY KEY, -- ID c·ªßa c√¥ng th·ª©c
    UserID INT NOT NULL,
    FoodID INT NOT NULL,                    -- M√≥n ƒÉn ƒë∆∞·ª£c g·ª£i √Ω c√¥ng th·ª©c
    CuisineID INT NOT NULL,    
    AIRequest NVARCHAR(MAX),       -- ƒê·∫ßu v√†o cho AI x·ª≠ l√Ω
    AIResponse NVARCHAR(MAX),      -- ƒê·∫ßu ra c·ªßa AI
    AIModel NVARCHAR(255) NOT NULL, -- Model AI s·ª≠ d·ª•ng
    RejectionReason NVARCHAR(MAX) NULL, -- üîπ L√Ω do c√¥ng th·ª©c kh√¥ng ph√π h·ª£p
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (FoodID) REFERENCES Food(FoodID) ON DELETE CASCADE,
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (CuisineID) REFERENCES CuisineType(CuisineID) ON DELETE CASCADE
);

-- B·∫£ng UserFoodPreferences
CREATE TABLE UserFoodPreference (
    UserFoodPreferenceID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    FoodID INT NOT NULL,
    Preference NVARCHAR(50), -- v√≠ d·ª•: like/dislike
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (FoodID) REFERENCES Food(FoodID) ON DELETE CASCADE
);

CREATE TABLE UserIngreDientPreference(
	UserIngreDientPreferenceID INT IDENTITY(1,1) PRIMARY KEY,
	UserID INT NOT NULL,
    IngredientID INT NOT NULL,
	Level INT, -- -3 r·∫•t gh√©t - 3 r·∫•t th√≠ch
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID) ON DELETE CASCADE
)

-- B·∫£ng MealPlan
CREATE TABLE MealPlan (
    MealPlanID INT IDENTITY(1,1) PRIMARY KEY,
	UserID INT NOT NULL, -- User s·ªü h·ªØu meal plan
    PlanName NVARCHAR(100) NOT NULL,
    HealthGoal NVARCHAR(50),
    Duration INT CHECK (Duration > 0),
    Status NVARCHAR(20) DEFAULT 'Inactive',
	AIWarning NVARCHAR(MAX), -- Nh·ªØng c·∫£nh b√°o c·ªßa AI n·∫øu mealplan kh√¥ng ph√π h·ª£p v·ªõi s·ª©c kh·ªèe c·ªßa ng∆∞·ªùi d√πng
	StartAt DATETIME, -- ng√†y √°p d·ª•ng mealplan
    CreatedBy NVARCHAR(50), --Admin, System, UserName, AI
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedBy NVARCHAR(50),
    UpdatedAt DATETIME DEFAULT GETDATE(),
	FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng MealPlanDetail
CREATE TABLE MealPlanDetail (
    MealPlanDetailID INT IDENTITY(1,1) PRIMARY KEY,
    MealPlanID INT NOT NULL,
    FoodID INT NULL,
    FoodName NVARCHAR(255) NULL,
    Quantity FLOAT CHECK (Quantity > 0),
    MealType NVARCHAR(50), -- v√≠ d·ª•: b·ªØa s√°ng, b·ªØa tr∆∞a
    DayNumber INT NOT NULL, -- ng√†y 1,2...
    TotalCalories FLOAT CHECK (TotalCalories >= 0) DEFAULT 0, -- t·ªïng calo theo b·ªØa
    TotalCarbs FLOAT CHECK (TotalCarbs >= 0) DEFAULT 0, -- theo b·ªØa
    TotalFat FLOAT CHECK (TotalFat >= 0) DEFAULT 0, -- theo b·ªØa
	TotalProtein FLOAT CHECK (TotalProtein >= 0) DEFAULT 0, -- theo b·ªØa
    FOREIGN KEY (MealPlanID) REFERENCES MealPlan(MealPlanID) ON DELETE CASCADE,
    FOREIGN KEY (FoodID) REFERENCES Food(FoodID) ON DELETE CASCADE
);

-- B·∫£ng FoodSubstitution
CREATE TABLE FoodSubstitution (
    SubstitutionID INT IDENTITY(1,1) PRIMARY KEY,
    OriginalFoodID INT NOT NULL,
    SubstituteFoodID INT NOT NULL,
    Reason NVARCHAR(255),
    FOREIGN KEY (OriginalFoodID) REFERENCES Food(FoodID) ON DELETE NO ACTION,
    FOREIGN KEY (SubstituteFoodID) REFERENCES Food(FoodID) ON DELETE NO ACTION
);

-- B·∫£ng Notification
CREATE TABLE Notification (
    NotificationId INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL,
    Title NVARCHAR(255),
    Description NVARCHAR(255),
    Status NVARCHAR(50),
    Date DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng HealthcareIndicator/UserParameter (c√°c tham s·ªë ng∆∞·ªùi d√πng)
CREATE TABLE HealthcareIndicator (
    HealthcareIndicatorID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    Code NVARCHAR(50) NOT NULL, -- BMI,TDEE,..
    Name NVARCHAR(255) NOT NULL, -- T√™n ƒë·∫ßy ƒë·ªß c·ªßa tham s·ªë
    Type NVARCHAR(50) NOT NULL, -- Lo·∫°i d·ªØ li·ªáu (Calorie, Health, Nutrient, Hydration,...)
	CurrentValue FLOAT NULL, -- gi√° tr·ªã hi·ªán t·∫°i c·ªßa kh√°ch
    MinValue FLOAT NULL, 
    MediumValue FLOAT NULL,
    MaxValue FLOAT NULL,
    Active BIT DEFAULT 1,
    AISuggestion NVARCHAR(255) NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng AIRecommendMealPlan
CREATE TABLE AIRecommendMealPlan (
    AIRecommendMealPlanID INT IDENTITY(1,1) PRIMARY KEY,
    MealPlanID INT NULL,
    UserID INT NOT NULL,
    RecommendedAt DATETIME DEFAULT GETDATE(),
    AIRecommendMealPlanResponse NVARCHAR(MAX),
    Status NVARCHAR(50) DEFAULT 'Pending' NOT NULL,
    RejectionReason NVARCHAR(255) NULL,
	Feedback NVARCHAR(255) NULL, -- feedback c·ªßa ng∆∞·ªùi d√πng, admin xem x√©t l·∫°i n·∫øu response c·ªßa AI sai s·∫Ω c·∫£i thi·ªán AI
    FOREIGN KEY (MealPlanID) REFERENCES MealPlan(MealPlanID) ON DELETE NO ACTION,
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng MealLog
CREATE TABLE MealLog (
    MealLogID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,
    LogDate DATETIME DEFAULT GETDATE(),
    TotalCalories FLOAT CHECK (TotalCalories >= 0),
    TotalProtein FLOAT CHECK (TotalProtein >= 0) DEFAULT 0,
    TotalCarbs FLOAT CHECK (TotalCarbs >= 0) DEFAULT 0,
    TotalFat FLOAT CHECK (TotalFat >= 0) DEFAULT 0,
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng MealLogDetail
CREATE TABLE MealLogDetail (
    DetailID INT IDENTITY(1,1) PRIMARY KEY,
    MealLogID INT NOT NULL,
    FoodID INT,
	MealType NVARCHAR(50),  -- B·ªØa ƒÉn(Breakfast, lunch, dinner)
    Quantity FLOAT CHECK (Quantity > 0),
	ImageUrl NVARCHAR(MAX) NULL,
    Calories FLOAT CHECK (Calories >= 0),
    ServingSize NVARCHAR(50),
    Protein FLOAT CHECK (Protein >= 0),
    Carbs FLOAT CHECK (Carbs >= 0),
    Fat FLOAT CHECK (Fat >= 0),
    FOREIGN KEY (MealLogID) REFERENCES MealLog(MealLogID) ON DELETE CASCADE,
    FOREIGN KEY (FoodID) REFERENCES Food(FoodID) ON DELETE CASCADE
);

-- B·∫£ng AIRecommendMealLog
CREATE TABLE AIRecommendMealLog (
    AIRecommendMealLogID INT IDENTITY(1,1) PRIMARY KEY,
	MealLogID INT NULL,
	UserID INT NOT NULL,
    RecommendedAt DATETIME DEFAULT GETDATE(),
    AIRecommendMealLogResponse NVARCHAR(MAX),
	Status NVARCHAR(50) DEFAULT 'Pending' NOT NULL,
    RejectionReason NVARCHAR(255) NULL,
	Feedback NVARCHAR(255) NULL, -- feedback c·ªßa ng∆∞·ªùi d√πng, admin xem x√©t l·∫°i n·∫øu response c·ªßa AI sai s·∫Ω c·∫£i thi·ªán AI
	FOREIGN KEY (MealLogID) REFERENCES MealLog(MealLogID) ON DELETE NO ACTION,
	FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng PersonalGoal
CREATE TABLE PersonalGoal (
    GoalID INT IDENTITY(1,1) PRIMARY KEY,               
    UserID INT NOT NULL,                                
    GoalType NVARCHAR(50) NOT NULL,                     -- Lo·∫°i m·ª•c ti√™u (v√≠ d·ª•: S·ª©c kh·ªèe, Th·ªÉ h√¨nh, Dinh d∆∞·ª°ng)
	TargetWeight FLOAT CHECK (TargetWeight > 0),
	WeightChangeRate FLOAT,								-- T·ªëc ƒë·ªô tƒÉng gi·∫£m c√¢n n·∫∑ng
    GoalDescription NVARCHAR(255) NOT NULL,             -- M√¥ t·∫£ chi ti·∫øt v·ªÅ m·ª•c ti√™u
    StartDate DATETIME DEFAULT GETDATE(),               -- Ng√†y b·∫Øt ƒë·∫ßu
    TargetDate DATETIME NOT NULL,                       -- Ng√†y ho√†n th√†nh d·ª± ki·∫øn
    ProgressRate INT DEFAULT 0,							-- t·ªëc ƒë·ªô tƒÉng gi·∫£m tu·∫ßn/th√°ng
	Status NVARCHAR(20) DEFAULT 'Active' CHECK (Status IN ('Active', 'Completed', 'Failed')),
    ProgressPercentage FLOAT CHECK (ProgressPercentage >= 0 AND ProgressPercentage <= 100) DEFAULT 0, -- ph·∫ßn trƒÉm ho√†n th√†nh
    Notes NVARCHAR(MAX) NULL,
	DailyCalories FLOAT,
	DailyCarb FLOAT,
	DailyFat FLOAT,
	DailyProtein FLOAT,
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng Disease (danh m·ª•c c√°c lo·∫°i b·ªánh)
CREATE TABLE Disease (
    DiseaseID INT IDENTITY(1,1) PRIMARY KEY,
    DiseaseName NVARCHAR(255) NOT NULL,
    Description NVARCHAR(255) NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE()
);

-- B·∫£ng trung gian UserDisease (quan h·ªá n-n gi·ªØa User v√† Disease)
CREATE TABLE UserDisease (
    UserID INT NOT NULL,
    DiseaseID INT NOT NULL,
    PRIMARY KEY (UserID, DiseaseID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE,
    FOREIGN KEY (DiseaseID) REFERENCES Disease(DiseaseID) ON DELETE CASCADE
);

-- B·∫£ng MyFood (M√≥n ƒÉn do ng∆∞·ªùi d√πng t·ª± th√™m)
CREATE TABLE MyFood (
    MyFoodID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT NOT NULL,  -- Ng∆∞·ªùi d√πng t·∫°o m√≥n ƒÉn
    FoodName NVARCHAR(100) NOT NULL,
    ServingSize NVARCHAR(50), -- ƒê∆°n v·ªã kh·∫©u ph·∫ßn v√≠ d·ª•: 100g, 1 th√¨a
    Calories FLOAT CHECK (Calories >= 0),
    Protein FLOAT CHECK (Protein >= 0),
	Carbs FLOAT CHECK (Carbs >= 0),
    Fat FLOAT CHECK (Fat >= 0),
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID) ON DELETE CASCADE
);

-- B·∫£ng SystemConfiguration (Qu·∫£n l√Ω tham s·ªë h·ªá th·ªëng)
CREATE TABLE SystemConfiguration (
    ConfigID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL UNIQUE,           -- T√™n tham s·ªë (v√≠ d·ª•: "MinimumAge", "MinMenuItems")
    MinValue FLOAT NULL,                          -- Gi√° tr·ªã t·ªëi thi·ªÉu
    MaxValue FLOAT NULL,                          -- Gi√° tr·ªã t·ªëi ƒëa
    Unit NVARCHAR(50) NULL,                       -- ƒê∆°n v·ªã (v√≠ d·ª•: "years", "items")
    IsActive BIT DEFAULT 1,                       -- Tr·∫°ng th√°i ho·∫°t ƒë·ªông
    EffectedDateFrom DATETIME NOT NULL DEFAULT GETDATE(), -- Ng√†y b·∫Øt ƒë·∫ßu hi·ªáu l·ª±c
    EffectedDateTo DATETIME NULL,                 -- Ng√†y h·∫øt hi·ªáu l·ª±c
    Description NVARCHAR(255) NULL,               -- M√¥ t·∫£ tham s·ªë
    CreatedAt DATETIME DEFAULT GETDATE(),         -- Th·ªùi gian t·∫°o
    UpdatedAt DATETIME DEFAULT GETDATE()          -- Th·ªùi gian c·∫≠p nh·∫≠t
);

-- B·∫£ng trung gian AllergyIngredient (quan h·ªá n-n gi·ªØa Allergy v√† Ingredient)
CREATE TABLE AllergyIngredient (
    AllergyID INT NOT NULL,
    IngredientID INT NOT NULL,
    PRIMARY KEY (AllergyID, IngredientID),
    FOREIGN KEY (AllergyID) REFERENCES Allergy(AllergyID) ON DELETE CASCADE,
    FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID) ON DELETE CASCADE
);

-- B·∫£ng trung gian DiseaseIngredient (quan h·ªá n-n gi·ªØa Disease v√† Ingredient)
CREATE TABLE DiseaseIngredient (
    DiseaseID INT NOT NULL,
    IngredientID INT NOT NULL,
    PRIMARY KEY (DiseaseID, IngredientID),
    FOREIGN KEY (DiseaseID) REFERENCES Disease(DiseaseID) ON DELETE CASCADE,
    FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID) ON DELETE CASCADE
);
